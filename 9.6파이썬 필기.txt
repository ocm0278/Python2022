 9.6 파이썬 필기

8장 파이썬 리스트
 
대부분의 변수는 한 값만을 갖음- 변수에 새 값을 대입하면 이전 값에 덮어씌워 짐

class 타입- c언어 struct(구조체)에 나옴
-변수가 있음 멤버 변수

리스트 메서드
append 추가한다 가장 뒤에 덧 붙인다
insert 중에 끼워 넣는다
리스트 선언
사용전에 선언
class-initializer(초기화 함수)

for n in range(5)
      ||
n in [0,1,2,3,4] -> 수행 조건이 만족할때 반복(TRUE)

리스트는 캐비넷이다
-리스트는 많은 아이템을 보관할 수 있고 사용자가 순서를 바꾸기 위해 별도의
행동을 하지 않는 한 아이템의 순서를 유지
-리스트는 정렬 가능(예:원소 간 순서 바꾸기)
-sort메서드는 "스스로를 정렬"하는 기능(문자열과는 다름)
 
while 루프- 동일한 형태

문자열과 리스트

split 함수는 문자열을 작게 나누고 문자열로 구성된 리스트를 생성
이 문자열은 단어로 볼 수 있음
특정 단어에 접근하거나 모든 단어에 대해 루프를 실행할 수 있음
 
 리스트 요약
-켈렉션의 개념
-리스트와 유한 루프
-인덱스 생성과 검색
-리스트의 가변성
-여러 함수:len,min,max,sum
-리스트 자르기
-리스트 메서드 : append, remove
-리스트 정렬
-문자열을 단어 리스트로 나누기
-split을 이용한 문자열 분석

리스트의 초기화는 [ ] 로 함 인덱스는 [ ]로다
튜플은 ( )로 함

리스트 함수 len,min,max,sum => 튜플에 똑 같이 적용
튜플은 for에도 사용 가능
튜플은 수정 불가

리스트는 값을 바꿀수 있지만 튜플은 저장된 내용 변경 불가
상수= 고정값

튜플이 할 수 없는 것 
sort() = 불가능

튜플은 장점

-파이썬은 튜플을 수정 가능하지 않게 저장하기 때문에 리스트와 비교하여
메모리 사용량과 성능 측면에서 훨씬 단순하고 효과적
그러므로, 임시 변수를 선언할 때는 리스트를 쓰는 것보다

튜플의 선언

-튜플을 좌변에 놓는 것으로 선언문에서 사용 가능
-괄호는 생략 가능

튜플과 딕셔너리
 딕셔너리= KEY, VALUE

튜플의 비교

튜플에서 다른 시퀀스와 비교 연산자를 사용할 수 있음. 만약 첫번째 요소가 같다면,
파이썬은 다음 요소를 비교하고, 다름 요소가 있을 때까지 비교를 계속함

튜플은 시간 비교가 많다

Tuple로 된 List의 Sorting
딕셔너리를 정렬 하기 위해 튜플로 이루어진 리스트를 사용할 수 있음
items()메소드를 통해 키와 값를 얻은 후 sorted()메소드로 딕셔너리를 정렬하면 됨


 값을 이용한 정렬

-(키,값) 형태의 튜플로 이루어진 리스트를 만들면 값을 기준으로 정렬 할 수 있다
-for 반복문을 사용하여 튜플로 이루어진 리스트를 만들 수 있다

 튜플 요약

-튜플 문법 - 튜플 변경 불가 - 튜플 선언
-비교        - 키와 값을 이용한 딕셔너리 소트
-소트

LIst = [ , , , ]
Tuple = ( , , , ) 로 사용 return (a,b) 사용 , (x,y) = return(a,b) 
딕셔너리 = (key ,val) 로 이루어짐

 파이썬 딕셔너리
 => Data 분석 영역

 컬렉션이란

-컬렉션은 한 가지 이상의 값을 넣고 한꺼번에 가지고 돌아다닐 수 있어서 편리함
-여러개의 값을 하나의 "변수"에 담을 수 있음
-변수"안"에 공간을 여러 개 가짐
-변수 안에서 서로 다른 공간을 찾는 방법이 있음


컬렉션 이 아닌 것은 

 대부분의 변수는 한 값만을 갖음- 변수에 새 값을

 딕셔너리

-파이썬의 가장 강력한 데이터 컬렉션
-파이썬에서 빠르게 데이터베이스 같은 연산을 가능하게 함
-다른 언어에서는 다른 이름으로 불림

-리스트는 리스트 안에서 원소의 위치를 기반으로 인덱스를 매김
-딕셔너리는 가방과 같음 순서가 없음
-따라서 딕셔너리에 넣는 대상은 "조회 태그"를 달아 인덱스를 매김

리스트 [ ] b브라켓
튜플 ( ) phㅔ이스
딕셔너리 { } b브레이스

리스트와 딕셔너리 비교

딕셔너리는 값을 찾기 위해 숫자 대신 키를 사용하는 것만 빼면 리스트와 동일
딕셔너리는 대형 Data 에는 적합하지 않음

 딕셔너리 표현(상수)

-딕셔너리는 중괄호로 표현하면 키: 값 쌍 목록을 가짐

- 사이가 비어있는 중괄호로 빈 딕셔너리를 만들 수 있음

key=value

 딕셔너리 Traceback 에러
-딕셔너리에 없는 키를 참조하는 것은 오류를 일으킴
-in 연산자를 사용하여 키가 딕셔너리에 있는지 확인 가능

딕셔너리의 get 메서드

키가 이미 딕셔너리에 있는지 확인하고 키가 없다면 기본값으로 설정하는 확인
패턴은 아주 많이 쓰여서 이 일을 하는 get()이라는 메서드가 존재함

키가 딕셔너리에 없는 경우 기본 값으로 여김 (Traceback 에러 없음)
